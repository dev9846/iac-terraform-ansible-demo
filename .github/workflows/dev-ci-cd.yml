name: CI/CD Packer + Terraform

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1

jobs:
  build-ami:
    name: Build AMI with Packer
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Packer Amazon Plugin
        run: packer plugins install github.com/hashicorp/amazon

      - name: Install Packer Ansible Plugin
        run: packer plugins install github.com/hashicorp/ansible

      - name: Build AMI with Packer
        working-directory: packer
        run: |
          AMI_OUTPUT=$(packer build -machine-readable nginx-python3.8-ami.json | tee /tmp/packer.log | grep 'artifact,0,id' | cut -d, -f6 | cut -d: -f2)
          echo "AMI_ID=$AMI_OUTPUT" >> $GITHUB_ENV

      - name: confirm variable ami name
        run: echo $GITHUB_ENV

      - name: Debug packer output
        run: |
            packer build -machine-readable packer/nginx-python3.8-ami.json | tee packer-output.log

      - name: Show log lines
        run: grep 'artifact,0,id' packer-output.log || echo "No AMI line found"


  deploy:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    name: Deploy Terraform Infra
    runs-on: ubuntu-latest
    needs: build-ami

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Inject AMI ID into tfvars
        run: |
          echo 'ami_id = "${{ env.AMI_ID }}"' > env/dev/terraform.auto.tfvars

      - name: Confirm AMI ID was written
        run: cat env/dev/terraform.auto.tfvars    

      - name: Terraform Init
        working-directory: env/dev
        run: terraform init

      - name: Terraform Apply
        working-directory: env/dev
        run: terraform apply -auto-approve
